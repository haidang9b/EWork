{"version":3,"file":"static/js/309.67922c20.chunk.js","mappings":"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","sources":["pages/Profile/PreviewMyProfile/index.js"],"sourcesContent":["import { Download, Save } from \"@mui/icons-material\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    InputLabel,\r\n    LinearProgress,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n} from \"@mui/material\";\r\nimport html2canvas from \"html2canvas\";\r\nimport jsPDF from \"jspdf\";\r\nimport moment from \"moment\";\r\nimport React, { Suspense, useRef } from \"react\";\r\nimport { FaEye } from \"react-icons/fa\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Loading } from \"../../../components\";\r\nimport useAuth from \"../../../hook/useAuth\";\r\nimport useNotify from \"../../../hook/useNotify\";\r\nimport { uploadNewCVThunk } from \"../../CVManagement/document.slice\";\r\nconst MakeCVTemplate = React.lazy(() => import(\"../MakeCVTemplate\"));\r\n\r\n/**\r\n * Component PreviewMyProfile - Hiển thị mẫu CV của người dùng\r\n *\r\n * @param {object} param0\r\n * @param {object} param0.myProfileDialog\r\n * @param {function} param0.setMyProfileDialog\r\n * @example\r\n * <PreviewMyProfile  myProfileDialog setMyProfileDialog />\r\n */\r\nconst PreviewMyProfile = ({ myProfileDialog, setMyProfileDialog }) => {\r\n    const handleClose = () => {\r\n        setMyProfileDialog({\r\n            ...myProfileDialog,\r\n            isOpen: false,\r\n        });\r\n    };\r\n    const [language, setLanguage] = React.useState(\"vi\");\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const { user } = useAuth();\r\n    const nameCVRef = useRef();\r\n    const dispatch = useDispatch();\r\n    const { setNotify } = useNotify();\r\n    const exportCVToPDF = async (isUploadToServer) => {\r\n        setIsLoading(true);\r\n        const nameCV = nameCVRef.current.value;\r\n        const cvNeedMake = document.getElementById(\"cv-need-make\");\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = cvNeedMake.offsetWidth;\r\n        canvas.height = cvNeedMake.offsetHeight;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.scale(2, 2);\r\n        ctx.translate(-cvNeedMake.offsetLeft, -cvNeedMake.offsetTop);\r\n        html2canvas(cvNeedMake, {\r\n            scrollX: 0,\r\n            scrollY: -window.scrollY,\r\n            scale: 1,\r\n            useCORS: true,\r\n        })\r\n            .then(async (canvas) => {\r\n                const image = { type: \"image/jpeg\", quality: 0.98 };\r\n                const margin = [0.5, 0.5];\r\n                const fileName = `${\r\n                    nameCV\r\n                        ? nameCV\r\n                        : moment().format(`${user?.given_name}_DD_MM_YYYY`)\r\n                }.pdf`;\r\n                const imgWidth = 8.5;\r\n                const pageHeightStandard = 11;\r\n\r\n                const innerPageWidth = imgWidth - margin[0] * 2;\r\n                const innerPageHeight = pageHeightStandard - margin[1] * 2;\r\n                const pxFullHeight = canvas.height;\r\n                const pxPageHeight = Math.floor(\r\n                    canvas.width * (pageHeightStandard / imgWidth)\r\n                );\r\n                const nPages = Math.ceil(pxFullHeight / pxPageHeight);\r\n\r\n                // Define pageHeight separately so it can be trimmed on the final page.\r\n                let pageHeight = innerPageHeight;\r\n\r\n                // Create a one-page canvas to split up the full image.\r\n                const pageCanvas = document.createElement(\"canvas\");\r\n                const pageCtx = pageCanvas.getContext(\"2d\");\r\n                pageCanvas.width = canvas.width;\r\n                pageCanvas.height = pxPageHeight;\r\n                // Initialize the PDF.\r\n                var pdf = new jsPDF(\"p\", \"in\", [8.5, 11]);\r\n\r\n                for (var page = 0; page < nPages; page++) {\r\n                    // Trim the final page to reduce file size.\r\n                    if (\r\n                        page === nPages - 1 &&\r\n                        pxFullHeight % pxPageHeight !== 0\r\n                    ) {\r\n                        pageCanvas.height = pxFullHeight % pxPageHeight;\r\n                        pageHeight =\r\n                            (pageCanvas.height * innerPageWidth) /\r\n                            pageCanvas.width;\r\n                    }\r\n\r\n                    // Display the page.\r\n                    var w = pageCanvas.width;\r\n                    var h = pageCanvas.height;\r\n                    pageCtx.fillStyle = \"white\";\r\n                    pageCtx.fillRect(0, 0, w, h);\r\n                    pageCtx.drawImage(\r\n                        canvas,\r\n                        0,\r\n                        page * pxPageHeight,\r\n                        w,\r\n                        h,\r\n                        0,\r\n                        0,\r\n                        w,\r\n                        h\r\n                    );\r\n\r\n                    // Add the page to the PDF.\r\n                    if (page > 0) pdf.addPage();\r\n                    const imgData = pageCanvas.toDataURL(\r\n                        \"image/\" + image.type,\r\n                        image.quality\r\n                    );\r\n                    pdf.addImage(\r\n                        imgData,\r\n                        image.type,\r\n                        margin[1],\r\n                        margin[0],\r\n                        innerPageWidth,\r\n                        pageHeight\r\n                    );\r\n                }\r\n                if (isUploadToServer) {\r\n                    // upload to server\r\n                    const file = new File([pdf.output(\"blob\")], fileName);\r\n                    const resultDispatch = await dispatch(\r\n                        uploadNewCVThunk(file)\r\n                    ).unwrap();\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: resultDispatch.message,\r\n                        title: \"Đăng tải CV mới\",\r\n                        type: resultDispatch.isSuccess ? \"success\" : \"error\",\r\n                    });\r\n                } else {\r\n                    // download to local\r\n                    pdf.save(fileName);\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Tạo và tải CV thành công\",\r\n                        title: \"Tải CV\",\r\n                        type: \"success\",\r\n                    });\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={myProfileDialog?.isOpen}\r\n            onClose={handleClose}\r\n            maxWidth={\"lg\"}\r\n            fullWidth\r\n        >\r\n            <DialogTitle>\r\n                <FaEye /> Xem CV từ hồ sơ\r\n                <LinearProgress\r\n                    color=\"success\"\r\n                    sx={{\r\n                        display: isLoading ? \"block\" : \"none\",\r\n                    }}\r\n                />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    inputRef={nameCVRef}\r\n                    label=\"Tên của CV\"\r\n                    placeholder=\"Nhập tên CV\"\r\n                    required\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                />\r\n                <InputLabel id=\"language-select-label\">Ngôn ngữ CV</InputLabel>\r\n                <Select\r\n                    fullWidth\r\n                    labelId=\"language-select-label\"\r\n                    value={language}\r\n                    onChange={(event) => setLanguage(event.target.value)}\r\n                >\r\n                    <MenuItem value=\"vi\">Tiếng Việt</MenuItem>\r\n                    <MenuItem value=\"en\">Tiếng Anh</MenuItem>\r\n                </Select>\r\n                <Suspense fallback={<Loading />}>\r\n                    <div id=\"cv-need-make\">\r\n                        <MakeCVTemplate language={language} />\r\n                    </div>\r\n                </Suspense>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    onClick={() => exportCVToPDF(false)}\r\n                    variant=\"contained\"\r\n                    startIcon={<Download />}\r\n                    color=\"primary\"\r\n                    disabled={isLoading}\r\n                    fullWidth\r\n                >\r\n                    Tải CV\r\n                </Button>\r\n                <Button\r\n                    onClick={() => exportCVToPDF(true)}\r\n                    variant=\"contained\"\r\n                    startIcon={<Save />}\r\n                    color=\"success\"\r\n                    disabled={isLoading}\r\n                    fullWidth\r\n                >\r\n                    Lưu CV\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nPreviewMyProfile.displayName = \"PreviewMyProfile\";\r\n\r\nexport default PreviewMyProfile;\r\n"],"names":["MakeCVTemplate","React","PreviewMyProfile","myProfileDialog","setMyProfileDialog","language","setLanguage","isLoading","setIsLoading","user","useAuth","nameCVRef","useRef","dispatch","useDispatch","setNotify","useNotify","exportCVToPDF","isUploadToServer","nameCV","current","value","cvNeedMake","document","getElementById","canvas","createElement","width","offsetWidth","height","offsetHeight","ctx","getContext","scale","translate","offsetLeft","offsetTop","html2canvas","scrollX","scrollY","window","useCORS","then","image","type","quality","margin","fileName","moment","format","given_name","innerPageWidth","innerPageHeight","pxFullHeight","pxPageHeight","Math","floor","nPages","ceil","pageHeight","pageCanvas","pageCtx","pdf","jsPDF","page","w","h","fillStyle","fillRect","drawImage","addPage","imgData","toDataURL","addImage","file","File","output","uploadNewCVThunk","unwrap","resultDispatch","isOpen","message","title","isSuccess","save","finally","open","onClose","maxWidth","fullWidth","color","sx","display","inputRef","label","placeholder","required","variant","id","labelId","onChange","event","target","Suspense","fallback","onClick","startIcon","disabled","displayName"],"sourceRoot":""}