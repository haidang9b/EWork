{"version":3,"file":"static/js/285.3721618b.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/CardHeader/cardHeaderClasses.js","../node_modules/@mui/material/CardHeader/CardHeader.js","pages/CompanyInformation/HeaderCard/index.js"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardHeaderUtilityClass(slot) {\n  return generateUtilityClass('MuiCardHeader', slot);\n}\nconst cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);\nexport default cardHeaderClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"avatar\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Typography from '../Typography';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport cardHeaderClasses, { getCardHeaderUtilityClass } from './cardHeaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar'],\n    action: ['action'],\n    content: ['content'],\n    title: ['title'],\n    subheader: ['subheader']\n  };\n  return composeClasses(slots, getCardHeaderUtilityClass, classes);\n};\nconst CardHeaderRoot = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => _extends({\n    [`& .${cardHeaderClasses.title}`]: styles.title,\n    [`& .${cardHeaderClasses.subheader}`]: styles.subheader\n  }, styles.root)\n})({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 16\n});\nconst CardHeaderAvatar = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Avatar',\n  overridesResolver: (props, styles) => styles.avatar\n})({\n  display: 'flex',\n  flex: '0 0 auto',\n  marginRight: 16\n});\nconst CardHeaderAction = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  flex: '0 0 auto',\n  alignSelf: 'flex-start',\n  marginTop: -4,\n  marginRight: -8,\n  marginBottom: -4\n});\nconst CardHeaderContent = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Content',\n  overridesResolver: (props, styles) => styles.content\n})({\n  flex: '1 1 auto'\n});\nconst CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardHeader'\n  });\n  const {\n      action,\n      avatar,\n      className,\n      component = 'div',\n      disableTypography = false,\n      subheader: subheaderProp,\n      subheaderTypographyProps,\n      title: titleProp,\n      titleTypographyProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component,\n    disableTypography\n  });\n  const classes = useUtilityClasses(ownerState);\n  let title = titleProp;\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps, {\n      children: title\n    }));\n  }\n  let subheader = subheaderProp;\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"text.secondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps, {\n      children: subheader\n    }));\n  }\n  return /*#__PURE__*/_jsxs(CardHeaderRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [avatar && /*#__PURE__*/_jsx(CardHeaderAvatar, {\n      className: classes.avatar,\n      ownerState: ownerState,\n      children: avatar\n    }), /*#__PURE__*/_jsxs(CardHeaderContent, {\n      className: classes.content,\n      ownerState: ownerState,\n      children: [title, subheader]\n    }), action && /*#__PURE__*/_jsx(CardHeaderAction, {\n      className: classes.action,\n      ownerState: ownerState,\n      children: action\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.node,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The content of the component.\n   */\n  title: PropTypes.node,\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default CardHeader;","import React, { useState } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    companyInformationSelector,\r\n    uploadAvatarCompanyThunk,\r\n} from \"../companyInformation.slice\";\r\nimport { Status } from \"../../../common/constants\";\r\nimport { UploadFileDialog } from \"../../../components\";\r\nimport useNotify from \"../../../hook/useNotify\";\r\nimport useFileUpload from \"../../../hook/useFileUpload\";\r\n\r\nconst HeaderCard = () => {\r\n    const { getFilePathUpload } = useFileUpload();\r\n    const { setNotify } = useNotify();\r\n    const dispatch = useDispatch();\r\n    const [uploadDialog, setUploadDialog] = useState({\r\n        isOpen: false,\r\n        title: \"Thay đổi ảnh đại diện\",\r\n        mutliple: false,\r\n        acceptExtensionFiles: [\"jpg\", \"jpeg\", \"apng\", \"png\", \"svg\", \"webp\"],\r\n        onUpload: async (files) => {\r\n            const resultDispatch = await dispatch(\r\n                uploadAvatarCompanyThunk(files[0])\r\n            ).unwrap();\r\n            setNotify({\r\n                isOpen: true,\r\n                message: resultDispatch.message,\r\n                title: \"Đăng tải CV mới\",\r\n                type: resultDispatch.isSuccess ? \"success\" : \"error\",\r\n            });\r\n            if (resultDispatch.isSuccess) {\r\n                setUploadDialog({\r\n                    ...uploadDialog,\r\n                    isOpen: false,\r\n                });\r\n            }\r\n        },\r\n    });\r\n    const { status, information } = useSelector(companyInformationSelector);\r\n    const handleChangeAvatar = () => {\r\n        setUploadDialog({\r\n            ...uploadDialog,\r\n            isOpen: true,\r\n        });\r\n    };\r\n    return (\r\n        <Card\r\n            sx={{\r\n                textAlign: \"Center\",\r\n                marginTop: \"4px\",\r\n            }}\r\n        >\r\n            <CardHeader>Thông tin công ty</CardHeader>\r\n            <CardContent\r\n                sx={{\r\n                    textAlign: \"center\",\r\n                }}\r\n            >\r\n                <Avatar\r\n                    alt=\"Avatar\"\r\n                    src={\r\n                        information?.avatarUrl\r\n                            ? `${getFilePathUpload(information?.avatarUrl)}`\r\n                            : \"/static/images/avatar/2.jpg\"\r\n                    }\r\n                    loading=\"lazy\"\r\n                    sx={{\r\n                        border: \"solid 1px #f0f2f5\",\r\n                        height: {\r\n                            md: \"160px\",\r\n                            xs: \"80px\",\r\n                        },\r\n                        width: {\r\n                            md: \"160px\",\r\n                            xs: \"80px\",\r\n                        },\r\n                        margin: \"auto\",\r\n                    }}\r\n                />\r\n                <Typography variant=\"h6\">\r\n                    {status === Status.loading\r\n                        ? \"Loading\"\r\n                        : information?.companyName}\r\n                </Typography>\r\n                <Button variant=\"outlined\" onClick={handleChangeAvatar}>\r\n                    Chỉnh sửa ảnh đại diện\r\n                </Button>\r\n            </CardContent>\r\n            <UploadFileDialog\r\n                uploadDialog={uploadDialog}\r\n                setUploadDialog={setUploadDialog}\r\n            />\r\n        </Card>\r\n    );\r\n};\r\n\r\nHeaderCard.displayName = \"HeaderCard\";\r\n\r\nexport default HeaderCard;\r\n"],"names":["getCardHeaderUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardHeaderRoot","styled","name","overridesResolver","props","styles","_extends","cardHeaderClasses","title","subheader","root","display","alignItems","padding","CardHeaderAvatar","avatar","flex","marginRight","CardHeaderAction","action","alignSelf","marginTop","marginBottom","CardHeaderContent","content","React","inProps","ref","useThemeProps","className","component","disableTypography","subheaderProp","subheaderTypographyProps","titleProp","titleTypographyProps","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","useUtilityClasses","type","Typography","_jsx","variant","children","color","_jsxs","clsx","as","HeaderCard","getFilePathUpload","useFileUpload","setNotify","useNotify","dispatch","useDispatch","useState","isOpen","mutliple","acceptExtensionFiles","onUpload","files","uploadAvatarCompanyThunk","unwrap","resultDispatch","message","isSuccess","setUploadDialog","uploadDialog","useSelector","companyInformationSelector","status","information","Card","sx","textAlign","CardContent","Avatar","alt","src","avatarUrl","loading","border","height","md","xs","width","margin","Status","companyName","Button","onClick","displayName"],"sourceRoot":""}