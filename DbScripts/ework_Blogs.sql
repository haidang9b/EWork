-- MySQL dump 10.13  Distrib 8.0.31, for Win64 (x86_64)
--
-- Host: 34.69.112.218    Database: ework
-- ------------------------------------------------------
-- Server version	8.0.26-google

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;
SET @@SESSION.SQL_LOG_BIN= 0;

--
-- GTID state at the beginning of the backup 
--

SET @@GLOBAL.GTID_PURGED=/*!80000 '+'*/ '5b3bb189-9b10-11ed-9ef5-42010a400002:1-124279';

--
-- Table structure for table `Blogs`
--

DROP TABLE IF EXISTS `Blogs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Blogs` (
  `Id` bigint NOT NULL AUTO_INCREMENT,
  `Title` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `Content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `UserId` bigint NOT NULL,
  `BlogCategoryId` bigint NOT NULL,
  `CreatedDate` datetime(6) NOT NULL,
  `UpdatedDate` datetime(6) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_Blogs_BlogCategoryId` (`BlogCategoryId`),
  KEY `IX_Blogs_UserId` (`UserId`),
  CONSTRAINT `FK_Blogs_BlogCategories_BlogCategoryId` FOREIGN KEY (`BlogCategoryId`) REFERENCES `BlogCategories` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_Blogs_Users_UserId` FOREIGN KEY (`UserId`) REFERENCES `Users` (`Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Blogs`
--

LOCK TABLES `Blogs` WRITE;
/*!40000 ALTER TABLE `Blogs` DISABLE KEYS */;
INSERT INTO `Blogs` VALUES (1,'QA là gì? QA và QC có phải là một vị trí giống nhau?','<h2>QA là gì?</h2><p>QA là gì?</p><p>QA là viết tắt của cụm từ Quality Assurance. QA là người chịu trách nhiệm đảm bảo chất lượng sản phẩm thông qua việc đưa ra quy trình làm việc giữa các bên liên quan.</p><h3>QA là làm gì?</h3><ol><li>Đề xuất, đưa ra quy trình phát triển&nbsp;(development process) sản phẩm&nbsp;phù hợp với yêu cầu cụ thể của từng dự án. Các quy trình này có thể được phát triển dựa trên V-model hay&nbsp;<a href=\"https://itviec.com/blog/agile-la-gi-scrum-la-gi/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">Agile</a>&nbsp;(đa số là Scrum hoặc Lean Development). Hoặc thông qua việc áp dụng những quy trình quản lý sẵn có như ISO hay CMMI.</li><li>Đưa ra những tài liệu, biểu mẫu, hướng dẫn&nbsp;để đảm bảo chất lượng của sản phẩm cho tất cả các bộ phận trong nhóm phát triển sản phẩm.</li><li>Kiểm tra, audit việc thực thi quy trình&nbsp;của các bộ phận trong nhóm làm sản phẩm có đúng quy trình QA đã đề ra không.</li><li>Nhắc nhở đội ngũ phát triển sản phẩm&nbsp;việc tuân thủ theo quy trình làm việc đã đưa ra.</li><li>Điều chỉnh, thay đổi quy trình phù hợp&nbsp;với từng sản phẩm mà các team đang thực hiện.</li></ol><h3>Tuyển dụng QA của FPT IS</h3><ul><li>Tư vấn về quy trình cho dự án để đảm bảo chất lượng toàn dự án.</li><li>Kiểm soát việc thực hiện quy trình của dự án.</li><li>Thu nhận và theo dõi các ý kiến phản hồi khách hàng.</li><li>Thực hiện kiểm duyệt lần cuối (Final inspection) đối với những sản phẩm bàn giao cho khách hàng để đảm bảo chất lượng đúng như cam kết.</li><li>Thực hiện việc đo đạc và phân tích số liệu để đánh giá chất lượng sản phẩm.</li><li>Cải tiến quy trình.</li></ul><p>Xem thêm những mẫu tuyển dụng&nbsp;<a href=\"https://itviec.com/viec-lam-it/qa?utm_source=blogpost&amp;utm_medium=center_post&amp;utm_campaign=linktosite\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">việc làm QA</a>&nbsp;tại ITviec.</p><blockquote><a href=\"https://itviec.com/viec-lam-it/qa/ho-chi-minh-hcm?utm_source=blogpost&amp;utm_medium=center_post&amp;utm_campaign=linktosite\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\"><em>Việc làm QA tại TP. HCM</em></a></blockquote><blockquote><a href=\"https://itviec.com/viec-lam-it/qa/ha-noi?utm_source=blogpost&amp;utm_medium=center_post&amp;utm_campaign=linktosite\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\"><em>Việc làm QA tại Hà Nội</em></a></blockquote><h3>Kỹ năng cần thiết của QA là gì?</h3><ol><li>Hiểu sâu về kiến trúc hệ thống của phần mềm vì công việc của QA rộng hơn QC.</li><li>Khả năng tổ chức, tư duy logic và có hệ thống.</li><li>Kỹ năng phân tích, làm việc dựa trên số liệu tốt.</li><li>Kiến thức rộng về các lĩnh vực của phần mềm mà các team đang thực hiện.</li><li>Kỹ năng giao tiếp trong nội bộ team và các team khác. Mục đích: khai thác thông tin về sản phẩm, dự án và ứng dụng nó vào việc xây dựng hệ thống quy trình.</li><li>Hiểu rõ về các chứng chỉ CMMI, ISO… trong phần mềm để xây dựng các quy trình chuẩn cho các team.</li></ol><h3>Tài liệu QA học tập</h3><ol><li><a href=\"https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">CMMI Wikipedia</a>: nguồn thông tin về chứng chỉ CMMI cần thiết cho PQA.</li><li><a href=\"https://www.wibas.com/cmmi/process-and-product-quality-assurance-ppqa-cmmi-dev\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">Wibas</a>: hướng dẫn chi tiết về công việc của PQA và một số tài liệu tham khảo.</li><li><a href=\"https://www.linkedin.com/pulse/7-essential-steps-implementing-process-quality-tim-landerville\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">Tim Landerville</a>: bài viết khá chi tiết về 7 bước thực hiện công việc PQA.</li><li><a href=\"https://www.mitre.org/publications/systems-engineering-guide/acquisition-systems-engineering/quality-assurance-and-measurement\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">Quality Assurance and Measurement</a>: hướng dẫn chi tiết về các bước thực hiện PQA và tài liệu cho bạn. </li></ol><p><br></p>',3,5,'2023-01-15 11:05:24.860364','2023-01-15 11:05:24.860369'),(3,'Tester là gì? Kỹ năng nào cần để trở thành Tester giỏi?','<p><em>Tester là người kiểm thử phần mềm để tìm kiếm các lỗi, sai sót, hay bất cứ vấn đề nào mà có thể ảnh hưởng đến chất lượng phần mềm.</em></p><p>Tùy từng công ty, từng vị trí công việc cụ thể mà nghề Tester có thể chia thành nhiều nhánh như QA, QC, Manual Tester, Automation Tester… Tuy nhiên, tất cả đều có thể gọi chung là Tester.</p><p class=\"ql-align-justify\">Cùng đọc bài phỏng vấn của ITviec với anh&nbsp;Lê Việt An,&nbsp;Test Project Manager của&nbsp;<a href=\"https://itviec.com/companies/tma-solutions?utm_source=blogpost&amp;utm_medium=jobs&amp;utm_content=tester-thanh-cong&amp;utm_campaign=leader-interviews\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">TMA Solutions</a>&nbsp;để nghe anh chia sẻ về:</p><ul><li class=\"ql-align-justify\">Những khó khăn thử thách của nghề, và những kỹ năng cần thiết để bạn có thể trở thành Tester giỏi.</li><li class=\"ql-align-justify\">Những cơ hội nghề nghiệp tiếp theo của Tester.</li><li class=\"ql-align-justify\">Lời khuyên anh dành cho các bạn muốn trở thành Tester trong tương lai.</li></ul><p>Xem thêm&nbsp;<a href=\"https://itviec.com/viec-lam-it/tester?utm_source=blogpost&amp;utm_medium=first_post&amp;utm_campaign=linktosite\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">việc làm Tester</a>&nbsp;trên ITviec</p><p class=\"ql-align-justify\"><br></p><h2 class=\"ql-align-justify\">Vì sao anh lại chọn trở thành Tester?</h2><p class=\"ql-align-justify\">Thật ra thì nghề này chọn anh, không phải anh chọn nó.</p><p class=\"ql-align-justify\">Thời điểm anh tốt nghiệp, khái niệm Tester không phổ biến. Điều may mắn là anh làm trong MMSoft, một công ty nhỏ, nên anh có cơ hội trải nghiệm nhiều vị trí khác nhau.</p><p class=\"ql-align-justify\">Đó là một dịp tình cờ khi công ty đang cần Tester, nên công ty cử anh sang phụ team test, và anh dính với nghề này từ đó đến giờ. Anh cảm thấy có hứng thú với nghề test hơn development.</p><h2 class=\"ql-align-justify\">Anh có thể chia sẻ công việc thường ngày của mình không ạ?</h2><p class=\"ql-align-justify\">Hiện tại anh đang quản lý 3 team Test nhỏ cả về Manual lẫn Automation cho một khách hàng của TMA.</p><p class=\"ql-align-justify\">Công việc chính của anh,&nbsp;về kỹ thuật là tư vấn các bạn trong team&nbsp;nên xử lý các tình huống test như thế nào.</p><p class=\"ql-align-justify\">Về công tác quản lý, anh theo dõi tiến độ công việc và chất lượng của các test release cho các dự án của mình và xử lý tình huống.</p><p class=\"ql-align-justify\">Ví dụ một bạn Tester của anh phát hiện ra một bug, mà người Developer code ra function đó bảo là “tôi đã test kỹ lắm rồi, không thể nào có bug được, không tin thì qua máy tôi, tôi demo cho xem.” Function đó hoạt động bình thường trên máy người Developer kia. Nhưng khi đẩy lên môi trường test thì 100% lại bị lỗi.</p><p class=\"ql-align-justify\">Anh thuyết phục người&nbsp;<a href=\"https://itviec.com/jobs/developer?utm_source=blogpost&amp;utm_medium=center_post&amp;utm_campaign=linktosite\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">Developer</a>&nbsp;đó cùng ngồi lại để khảo sát function trên môi trường test. Anh ta không chịu.</p><p class=\"ql-align-justify\">Cuối cùng, anh phải giải quyết bằng cách nói là “chúng ta giao phần mềm cho khách hàng, chúng ta không giao PC của anh, nên anh làm ơn ngồi xuống cùng tìm hiểu vấn đề để có thể giao sản phẩm tốt nhất cho khách hàng.”</p><h2 class=\"ql-align-justify\">Anh thấy nghề Tester có điểm cộng&nbsp;nào?</h2><p class=\"ql-align-center\"><img src=\"https://itviec.com/blog/wp-content/uploads/2017/07/15ed52a-640x518.jpg\" alt=\"nghe-tester-la-gi\" height=\"253\" width=\"313\"></p><p class=\"ql-align-center\">Anh An đứng giữa</p><p class=\"ql-align-justify\">Điểm cộng thứ nhất là&nbsp;anh được biết nhiều business domain khác nhau và được nhìn sâu xuống toàn bộ hệ thống.</p><p class=\"ql-align-justify\">Ví dụ khách hàng muốn phần mềm cho business domain A. Với cương vị là một Tester của phần mềm này, anh phải hiểu business domain A và hiểu phần mềm của mình giải quyết được vấn đề&nbsp;nào của khách hàng, giải quyết như thế nào, chứ không chỉ xoay quanh phần mềm này có bao nhiêu chức năng và những chức năng này làm gì, input là gì, output là gì.</p><p class=\"ql-align-justify\">Đồng thời, Tester có cơ hội hiểu và thấy phần mềm để giải quyết bài toán của business domain A kia thì cần được thiết kế như thế nào, cần bao nhiêu database, phải xây dựng chức năng nào cho dịch vụ nào…</p><p class=\"ql-align-justify\">Điểm cộng thứ 2 là nghề này giúp anh&nbsp;nhìn vấn đề ở nhiều góc độ khác nhau.</p><p class=\"ql-align-justify\">Có một châm ngôn mà anh luôn khuyên các bạn Tester để có khả năng nhìn từ nhiều góc độ khác nhau, đó là&nbsp;“be stupid”.</p><p class=\"ql-align-justify\">Đừng hi vọng rằng người dùng biết phải gõ cái gì, phải làm cái gì. Khi đã đưa sản phẩm ra thực tế thì bất cứ điều gì cũng có thể xảy ra và bất cứ ai cũng có thể làm bất cứ điều gì trên phần mềm.</p><p class=\"ql-align-justify\">Một function luôn được test/nhìn ở 2 góc độ hành vi tiêu biểu: hành vi đúng (positive case) và hành vi chưa đúng (negative case) thì nó hoạt động ra sao.</p><p class=\"ql-align-justify\">Ví dụ khi anh test một function mang tính chất báo cáo. Nghe có vẻ đơn giản chỉ là bấm một nút cho nó chạy ra file rồi xem các tính toán dữ liệu trên file có đúng và đủ không, định dạng có đúng theo yêu cầu khách hàng không. Thì đây là những cái nhìn tiêu biểu mà Tester nào cũng phải nhìn được.</p><p class=\"ql-align-justify\">Nhưng một Tester giỏi cần phải nhìn: “Có dữ liệu thì nó ra file như vầy, không có dữ liệu mà bấm nút xuất báo cáo thì nó như thế nào? Phần mềm chạy ra sao? Hiện ra câu thông báo gì? Câu thông báo có thân thiện với người dùng không? Hoặc là một function nào đó báo lỗi, thì nội dung thông báo có thân thiện không?”</p><p class=\"ql-align-justify\">Lúc nói ra vấn đề mà anh cho rằng là vấn đề thì anh phải nói để người nhận bug vẫn vui vẻ fix bug đó. Vì vậy, điểm cộng thứ 3 là nghề này luyện cho anh&nbsp;khả năng xử lý tình huống. Ngoài ra còn gián tiếp cải thiện khả năng giao tiếp của anh.</p><h2 class=\"ql-align-justify\">Anh có bí quyết nào giúp việc giao tiếp và thuyết phục các bạn Developer dễ dàng hơn không ạ?</h2><p class=\"ql-align-justify\">Ok, anh có một kinh nghiệm duy nhất là khi nói chuyện với Developer phải&nbsp;đặt mục tiêu là “lợi ích mang lại cho khách hàng/ người sử dụng”.&nbsp;Ví dụ như câu chuyện ở trên: mình giao phần mềm, không phải giao PC của người Developer cho khách hàng.</p><p class=\"ql-align-justify\">Cố gắng đừng thỏa hiệp với kỹ thuật của Developer.</p><p class=\"ql-align-justify\">Từng có tình huống, anh thấy là kết quả test function nó hoạt động như A, B, C. Nó không thật sự là kết quả tốt nhất. Khi anh nói chuyện với Developer, anh ta nói là kỹ thuật của mình chỉ làm được đến thế thôi.</p><p class=\"ql-align-justify\">Nếu anh cho qua, tức là anh đã thỏa hiệp với Developer. Nhưng anh không cho qua.</p><p class=\"ql-align-justify\">Lần đó, anh nhờ Technical Architect chuyển đổi architect, và nhờ BA nói chuyện lại với khách hàng là phần mềm hoạt động như X, Y, Z sẽ tốt hơn, vì vậy cần tính thêm tiền + thời gian để sửa function này lại.</p><p class=\"ql-align-center\"><img src=\"https://itviec.com/blog/wp-content/uploads/2017/07/1272188_10151703241131313_534389419_o-640x433.jpg\" alt=\"testing-la-gi\" height=\"433\" width=\"640\"></p><p class=\"ql-align-center\">Anh An (bên trái) cùng bạn.</p><h2 class=\"ql-align-justify\">Vậy nghề Tester có điểm trừ gì không anh?</h2><p class=\"ql-align-justify\">Điểm trừ lớn nhất là&nbsp;nhiều công ty ở Việt Nam xem nhẹ vai trò Tester&nbsp;và cho rằng chuyện chịu trách nhiệm chất lượng phần mềm là chuyện đơn giản, nên họ đưa ra chính sách về lương cho Tester thấp hơn Developer 1 bậc mặc dù 2 thằng cùng cấp.</p><p class=\"ql-align-justify\">Anh không đồng ý quan điểm này vì: đưa ra 2 dự án làm ví dụ. 1 dự án có Developer giỏi nhưng Tester dở (nên sẽ mở ít bug, toàn bug nhỏ, không nhận ra vấn đề của phần mềm từ góc nhìn người dùng phần mềm hoặc không nhìn ra vấn đề về tính tương thích/đồng bộ dữ liệu/performance của nhiều chức năng trong cùng 1 phần mềm…). Nên khi khách hàng sử dụng, có khả năng họ sẽ siêu thất vọng, hậu quả là công ty mất uy tín.</p><p class=\"ql-align-justify\">Nhưng trong 1 dự án khác, Developer dở nhưng Tester giỏi, thì kết quả cuối cùng tệ nhất có thể là chúng ta có rất nhiều bug cần fix vào những ngày cuối của dự án, khách hàng nhận phần mềm trễ&nbsp;1 chút nhưng nhìn chung vẫn hài lòng vì họ nhận được đúng cái họ mong muốn.”</p><h2 class=\"ql-align-justify\">Theo anh những tố chất nào thì quan trọng nhất với một Tester?</h2><p class=\"ql-align-justify\">Theo anh, ở thị trường Việt Nam,&nbsp;kỹ năng quan trọng nhất đối với Tester là kỹ năng phân tích.</p><p class=\"ql-align-justify\">Như một trong những điểm cộng của nghề mà anh đã chia sẻ ở trên là “luyện được cách nhìn vấn đề từ nhiều góc độ.” Để có góc nhìn này, bạn cần phân tích trong từng function nhỏ bạn đang test, và phân tích luôn những function liền kề với nó.</p><p class=\"ql-align-justify\">Kỹ năng thứ 2 là&nbsp;học hỏi nhanh.</p><p class=\"ql-align-justify\">Trong ngành phần mềm, thị trường Việt Nam là thị trường outsourcing. Business domain base của chúng ta không có cái nào cụ thể. Bạn phải sẵn sàng chuyển đổi, học domain khác và nhìn các domain ở nhiều góc độ khác nhau. Nên nếu bạn cảm thấy chật vật trong việc học domain mới, bạn sẽ không thể tiến xa trong nghề testing nói riêng và nghề phần mềm nói chung.</p><p class=\"ql-align-justify\">Thứ 3 mới là&nbsp;chi tiết, tỉ mỉ.</p><p class=\"ql-align-justify\">Để testing, chúng ta phải quan tâm đến từng dấu chấm, dấu phẩy trong từng thông điệp, độ logic của thông điệp có tốt hay không và các icon dù nhỏ nhất có phù hợp với thông điệp đưa tới người dùng không.</p><p class=\"ql-align-justify\">Thứ 4 là&nbsp;kỹ năng giao tiếp. Hay còn gọi là kỹ năng giải quyết mâu thuẫn.</p><p class=\"ql-align-justify\">Thứ 5 là&nbsp;tiếng Anh.</p><p class=\"ql-align-justify\">Tiếng Anh là điều hiển nhiên, vì chúng ta làm trong thị trường outsourcing. Trước đây giá thành nhân công Trung Quốc rẻ, nhưng bây giờ chất lượng tay nghề nhân công của họ lên thì họ nâng giá. Vì vậy khách hàng bây giờ có xu hướng chuyển đổi thị trường vào Việt Nam, Myanmar.</p><p class=\"ql-align-justify\">Cuối cùng là các bạn nên có tính “support”.</p><p class=\"ql-align-justify\">Người Tester không cần phải là ngôi sao sáng nhất cho cả dự án, nhưng sẵn sàng trân mình ra làm nhiều thứ ngoài trách nhiệm của mình để chất lượng của phần mềm tốt nhất. Đây là tố chất mang lại lợi thế rất lớn cho nghề Tester.</p><p class=\"ql-align-justify\">Nói ví dụ cụ thể, trong quá trình em đang test function A, tự nhiên thấy function B kì kì. Tất nhiên về trách nhiệm, B chẳng liên quan gì đến em. Nhưng khi em có tư tưởng “support” thì em sẽ phân tích. Vì mục tiêu cuối cùng chính là chất lượng của phần mềm, nên em mở bug function B luôn cho thằng bên cạnh.</p><p class=\"ql-align-center\"><img src=\"https://itviec.com/blog/wp-content/uploads/2017/07/IMG_2378-640x427.jpg\" alt=\"cong-viec-cua-tester\" height=\"427\" width=\"640\"></p><p class=\"ql-align-center\">Anh An mặc áo xanh ngọc, ngồi ngoài cùng bên trái.</p><h2 class=\"ql-align-justify\">Nghề Tester có thử thách nào mà ai khi đi con đường này cũng phải trải qua không anh?</h2><p class=\"ql-align-justify\">Khi theo đuổi con đường testing, công việc của em khá&nbsp;stress. Vì&nbsp;team test là chiến tuyến cuối cùng, đảm bảo chất lượng cho cả dự án&nbsp;trong vòng 8 tháng – 1 năm rưỡi – 2 năm.</p><p class=\"ql-align-justify\">Khi khách hàng tìm thấy lỗi A, B, C, câu hỏi đầu tiên bao giờ cũng là “vì sao Tester không phát hiện ra bug này?”</p><p class=\"ql-align-justify\">Điều đáng sợ nhất của nghề Tester là nhận được email từ sếp rằng: “Khách hàng mở 4 bug A, B, C, D. Ai là Tester của function này? Tại sao không phát hiện ra nó?”</p><p class=\"ql-align-justify\">Xem lại document, tìm lí do và trả lời email đó là một trong những vấn đề cực khó. Nếu thật sự là do em bỏ sót bug thì cần dũng cảm thừa nhận. Phải có Developer fix bug đó, và em phải test lại kỹ càng để giao sản phẩm sớm nhất.</p><p class=\"ql-align-justify\">Em không nhất thiết phải tìm hết tất cả document cũ để bảo vệ cho mình. Cái đó chỉ làm cho em càng thêm stress.</p><p class=\"ql-align-justify\">Sau khi trải qua tất cả, em cần ngồi lại để suy ngẫm rằng vì sao cái này nó dễ vậy mà lúc trước mình lại bỏ sót nó? Đặt cái đó là cái quan trọng, chứ đừng tự bảo vệ bằng cách, ví dụ như nói là “tại thằng Developer khác nó fix cái khác nên nó đè lên chức năng này của mình”.</p><h2 class=\"ql-align-justify\">Anh từng trải qua sai lầm nào? Anh đã vượt qua như thế nào và anh học được gì từ nó?</h2><p class=\"ql-align-justify\">Thời gian đầu anh làm Tester, anh bị một cái gọi là&nbsp;lỗi tâm lý. Anh cứ chăm chăm vào chuyện là mình mở bao nhiêu bug và anh muốn rằng mình là người mở bug nhiều nhất.</p><p class=\"ql-align-justify\">Anh đã có nhiều tranh cãi với Developer. Ví dụ một lần, anh làm 2 thao tác khác nhau trên function và thấy 2 bug khác nhau, mà Developer investigate và nói rằng “nó cùng 1 root cause trong code” nên Developer đặt trạng thái bug anh mở là “bug trùng nhau”.</p><p class=\"ql-align-justify\">Anh đã tranh cãi rất nhiều. Hệ quả của vấn đề này là anh phá vỡ mối quan hệ trong team và môi trường làm việc của mình.</p><p class=\"ql-align-justify\">Anh học được rằng, không đáng để làm như vậy, vì mục tiêu nghề nghiệp của mình không phải là mở được bao nhiêu bug mà là chất lượng phần mềm của mình tốt tới đâu.</p><p class=\"ql-align-justify\">Sau này anh rất nhẹ nhàng với những chuyện này. Thậm chí là anh khều khều kế bên bảo là “anh fix bug này đi, tôi khỏi mở bug”. Hoặc 3 – 4 vấn đề nhỏ, anh gom lại mở chung trong một bug. Anh nhận ra rằng thật ra Developer cùng team với mình. Trong project không nên có khái niệm team Developer và team Tester.</p><h2 class=\"ql-align-justify\">Khi đã định hướng trở thành Tester thì các bạn sẽ có những bước thăng tiến nào tiếp theo?</h2><p class=\"ql-align-justify\">Có 3 hướng thăng tiến mà các bạn có thể hướng tới.</p><p class=\"ql-align-justify\">Nếu bạn đi&nbsp;theo hướng technical&nbsp;(testing technical), thì có thể đặt mục tiêu&nbsp;trở thành BA&nbsp;(Business Analyst). Vì trong quá trình làm Tester, các bạn đã rèn luyện được kiến thức và kỹ năng của BA. Kỹ năng phân tích, kỹ năng giao tiếp và có kiến thức trên nhiều domain knowledge khác nhau.</p><p class=\"ql-align-justify\">Con đường thứ 2, nếu các bạn thấy mình&nbsp;có cách tư duy và kỹ năng thiêng về quản lý&nbsp;thì có thể nghĩ đến hướng&nbsp;Test Manager.</p><p class=\"ql-align-justify\">Hướng đi thứ 3 là các bạn&nbsp;cứ làm Tester&nbsp;thôi. Bạn không nhất thiết phải làm sếp của ai hết. Ở Việt Nam có tư tưởng “làm 8 năm mà không lên Manager là có vấn đề”. Không phải vậy. Các bạn thật sự đam mê với nghề thì hãy đặt hết đam mê và sự quan tâm của các bạn vào từng phần mềm bạn test.</p><p class=\"ql-align-justify\">Nhưng khi xác định đi theo con đường này, bạn phải nghĩ đến một chuyện: khi mới ra trường, một ngày bạn chạy được 15-20 test case, đến lúc chuẩn bị về hưu, 35-40 tuổi, nhiều lắm là một ngày bạn chạy được 30-40 test case. Không thể nào lên đến 100 test case được.</p><p class=\"ql-align-justify\">Vì vậy bạn cần truyền cảm hứng cho bản thân và cho người khác bằng cách cống hiến, truyền thụ lại kinh nghiệm cho các thế hệ tiếp theo, bao gồm cả các bạn trẻ mới ra trường và những bạn Tester ngồi kế bên mình.</p><p><br></p>',3,5,'2023-01-15 11:28:23.455924','2023-01-15 11:28:23.455926'),(4,'Low code là gì? Liệu Lập trình viên có bị mất việc vào “tay” Low-Code?','<p><em>Bạn không cần phải biết code mới viết phần mềm được, các nền tảng low code đã chứng minh được điều này. Đây là một loại nền tảng mới khai thác sức mạnh của tự động hóa để hỗ trợ bất kỳ ai cũng có thể tạo ra các ứng dụng chỉ bằng một vài thao tác đơn giản.</em></p><p>Phát triển phần mềm với low-code và no-code platform thật sự đã làm cho cuộc sống này trở nên dễ dàng hơn. Tuy nhiên, khi những nền tảng này phát triển, liệu chúng có thay đổi thị trường việc làm của lập trình viên theo hướng xấu đi không? Để làm rõ thêm về vấn đề này, ITviec đã có buổi phỏng vấn với anh&nbsp;<em>Phạm Thanh An – Director of Software Engineering tại TIKI</em>&nbsp;và đã có nhiều thông tin vô cùng hữu ích.</p><blockquote><a href=\"https://itviec.com/viec-lam-it/engineer?utm_medium=anchor_text&amp;utm_source=blog_21072021&amp;utm_campaign=daily\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\"><em>Việc làm Engineer</em></a><em>&nbsp;trên Toàn Quốc</em></blockquote><h2>Low-code là gì?</h2><p>“Tất cả những công cụ mà có thể sử dụng để xây dựng được các quy trình tự động mà không cần phải viết quá nhiều code thì được gọi là low-code hoặc cao hơn nữa là khái niệm no-code, tức là không cần phải viết một dòng code nào.” Anh An nhận định về khái niệm sơ khởi của low-code và no-code.</p><p>Low-code, hay no-code, là một hướng phát triển phần mềm theo cách tiếp cận trực quan. Theo đó, những nền tảng low-code cho phép người sử dụng viết ít code còn no-code thì không cần phải viết thêm dòng code nào. Những nền tảng low-code cơ bản sẽ có các thành phần (components) đã được tạo sẵn giống như là những mảnh ghép Lego, người dùng chỉ cần chọn mảnh ghép Lego mà mình muốn và dùng tính năng kéo-và-thả (drag-and-drop), sau đó thiết lập lại các thông số và nối các thành phần này lại với nhau để hoàn thành một giải pháp cụ thể.</p><p><img src=\"https://itviec.com/blog/wp-content/uploads/2021/07/low-code-platform-bubble-io-640x426.jpg\" alt=\"low code platform bubble.io\" height=\"426\" width=\"640\"></p><p>Bubble.io – Low-code platform phổ biến trên thế giới. Nguồn: bubble.io</p><p>Hiện nay, trên thị trường đã xuất hiện nhiều nền tảng low-code vô cùng dễ sử dụng, tiện lợi cho quá trình phát triển phần mềm như là&nbsp;<a href=\"http://bubble.io/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">bubble.io</a>,&nbsp;<a href=\"http://airdev.co/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">airdev.co</a>,&nbsp;<a href=\"http://webflow.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">webflow.com</a>,&nbsp;<a href=\"http://zapier.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">zapier.com</a>,&nbsp;<a href=\"http://airtable.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">airtable.com</a>,… hoặc Excel, PowerPoint cũng là những nền tảng low-code, no-code sơ khởi và thân thuộc nhất – tuy nhiên, những nền tảng này chỉ giới hạn người dùng trong công cụ đó mà không thể phát triển bên ngoài nền tảng. Anh An còn bật mí rằng trang web đầu tiên mà anh phát triển vào những năm còn đang học cấp 2 chính là được tạo ra bằng Microsoft PowerPoint.</p><p>Với những khả năng mà low-code có thể mang đến cho người dùng hiện tại, nền tảng này có thể thực hiện những nhiệm vụ đơn giản, hỗ trợ tự động hóa quy trình làm việc.</p><p>Low-code là hướng tiếp cận phát triển phần mềm phù hợp với hầu hết mọi doanh nghiệp, từ doanh nghiệp quy mô nhỏ đến lớn, nhất là đối với những doanh nghiệp lớn.</p><p>Theo anh An chia sẻ, doanh nghiệp càng lớn thì khối lượng công việc của team development sẽ càng lớn và timeline lúc nào cũng sẽ rất chặt nên nhờ vào sự xuất hiện của low-code platform, tự bản thân CEO, Project Manager, Product Manager có thể tự nghĩ ra giải pháp tự động cho các vấn đề mà mình gặp phải hoặc có thể thử nghiệm các thay đổi mà không cần đến sự hỗ trợ của lập trình viên – vốn dĩ đã rất bận rộn với công việc development cho các tính năng mới. Sau đó, nếu họ cảm thấy ổn với flow đó thì sẽ trao đổi với lập trình viên để phát triển. Như vậy, thời gian làm việc trong ngày của lập trình viên sẽ được tối ưu hóa và tạo ra giá trị thật.</p><blockquote><em>Tham khảo ngay:&nbsp;</em><a href=\"https://itviec.com/viec-lam-it/product-manager?utm_medium=anchor_text&amp;utm_source=blog_21072021&amp;utm_campaign=daily\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\"><em>Việc làm Product Manager</em></a><em>&nbsp;trên Toàn Quốc</em></blockquote><p>Tự bản thân anh An cũng mong muốn thời gian của mình được sử dụng vào những việc có thể đem lại giá trị cao hơn và sáng tạo hơn bằng cách tận dụng được ưu điểm của các công cụ phù hợp và&nbsp;coding không phải là công cụ duy nhất, anh còn cho rằng “Đối với anh, code đẹp nhất và tốt nhất là no code, vì no code thì cũng đồng nghĩa với no bug.”</p><h2>Ưu điểm và Nhược điểm khi làm việc với low-code platform</h2><ul><li>Ưu điểm:</li></ul><p><img src=\"https://itviec.com/blog/wp-content/uploads/2021/07/low-code-platform-loi-ich-640x480.jpg\" alt=\"lợi ích khi làm việc với low code\" height=\"480\" width=\"640\"></p><p>Một ưu điểm vô cùng lớn là&nbsp;bất kỳ ai cũng có thể sử dụng các nền tảng low-code và no-code, kể cả người dùng có biết về code hay không. Nhờ vậy, low-code platform đã mở ra một cánh cửa mới cho tất cả những ai muốn phát triển sản phẩm. Nếu bạn là một startup đang suy nghĩ đến việc phát triển phần mềm cho doanh nghiệp của mình thì low-code sẽ hỗ trợ bạn rất nhiều.</p><p>Một ưu điểm khác mà anh An nhận thấy trong quá trình tìm hiểu về low-code chính là nền tảng này&nbsp;giúp rút ngắn thời gian phát triển sản phẩm, từ đó tiết kiệm được nguồn lực sẵn có. Nhờ có low-code platform, doanh nghiệp có thể tinh gọn lại quá trình làm việc.</p><blockquote><em>Ví dụ như quy trình làm việc thông thường của team sẽ là: CEO hoặc Product Manager lên ý tưởng. Tiếp theo, họp toàn team để test flow, chốt ý tưởng, sau đó là planning, và hiện thực. Các bước này đều rất tốn thời gian và liên quan đến nhiều người.</em></blockquote><blockquote><em>Nhưng với low-code platform, ta có thể cắt đi các bước ở giữa. Có nghĩa rằng, tự CEO và Product Manager có thể hiện thực và kiểm thử được giải pháp để có thể kiểm thử được ý tưởng và hiện thực các tính năng bằng việc sử dụng nền tảng low-code.</em></blockquote><p>Tuy nhiên, low-code platform cũng chỉ mang ý nghĩa “thử nghiệm” những ý tưởng trong đầu, hoặc xây dựng những giải pháp hỗ trợ cho công ty. Việc này tiết kiệm thời gian thử nghiệm ý tưởng trước khi quyết định. Những người không chuyên về kỹ thuật khi cần xây dựng một sản phẩm hoàn chỉnh vẫn cần sự tư vấn, hỗ trợ của lập trình viên. Có thể nói, low-code chỉ hiệu quả khi được áp dụng trong những trường hợp nhất định.</p><p>Ưu điểm cuối mà anh An chia sẻ là các nền tảng low-code còn&nbsp;hỗ trợ người dùng trong việc tích hợp với các nền tảng khác và còn bao gồm cả quản lý về user, database…&nbsp;nên giúp lập trình viên tiết kiệm được thời gian trong phần này. Nhưng đây cũng vừa là ưu điểm mà cũng là khuyết điểm. Bạn tiếp tục theo dõi ở phần tiếp theo của bài viết nhé.</p><ul><li>Nhược điểm:</li></ul><p><img src=\"https://itviec.com/blog/wp-content/uploads/2021/07/low-code-platform-nhuoc-diem-640x480.jpg\" alt=\"nhược điểm khi làm việc với low code\" height=\"480\" width=\"640\"></p><p>Anh An chia sẻ 4 nhược điểm lớn nhất của một nền tảng low-code mà anh nhận thấy. Đồng thời, đây cũng là những khó khăn, hạn chế mà một người không chuyên về kỹ thuật dễ mắc phải khi làm việc với low-code platform:</p><p>Đầu tiên,&nbsp;với một sản phẩm, việc xây dựng sản phẩm “chạy” được chỉ mới là bước đầu tiên thôi, mà bước này thì low-code có thể hỗ trợ được, còn những bước tiếp theo như bảo trì (maintainability), mở rộng (extensibility), khả năng chịu tải (scalability) và khả năng làm việc trên cùng một code base (collaboration) thì các nền tảng low-code chưa có khả năng này.</p><p>Khuyết điểm trên cũng là hạn chế lớn nhất làm cho low-code platform chưa thể phát triển mạnh và thay thế được các cách phát triển phần mềm thông thường. Vì để xây dựng được một phần mềm đáp ứng được nhu cầu thay đổi liên tục của doanh nghiệp thì đội ngũ lập trình viên phải có khả năng để tùy biến phần mềm liên tục, trong khi với môi trường của low-code thì người dùng sẽ phải phụ thuộc vào những tính năng đã có sẵn, hoặc là phải chờ tính năng mới.</p><p>Với tình hình hiện tại, có lẽ chỉ khi nào có một phần mềm có thể được mở rộng và scale thành công với low-code platform thì các nền tảng này mới được công nhận là đã “ready” và khi đó mọi người lúc đó mới tự tin để xây dựng những phần mềm phức tạp hơn và đòi hỏi về hàm lượng engineering cao hơn trên các nền tảng low-code.</p><blockquote><em>Tham khảo ngay:&nbsp;</em><a href=\"https://itviec.com/viec-lam-it/engineer/ho-chi-minh-hcm?utm_medium=anchor_text&amp;utm_source=blog_21072021&amp;utm_campaign=daily\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\"><em>Việc làm Software Engineer tại TP. HCM</em></a></blockquote><p>Thứ hai,&nbsp;không một low-code platform nào có thể phục vụ được 100% tất cả những gì người dùng muốn vì mỗi platform sẽ chỉ cung cấp được những tính năng giới hạn. Anh chia sẻ thêm rằng “Anh chưa tìm thấy được một nền tảng low-code nào có thể xây dựng được một sản phẩm phần mềm phức tạp từ A-Z. Hiện tại, thông thường cần phải kết nối nhiều nền tảng với nhau nếu muốn xây dựng flow xử lý hoàn chỉnh.”</p><p>Chính vì thế, nếu một người có nền tảng kỹ thuật vững vàng thì họ sẽ hiểu được vấn đề nằm ở đâu và nhanh chóng tìm được hướng giải quyết, còn những ai không chuyên về xây dựng hệ thống thì nhiều khả năng sẽ bị “kẹt” lại ngay khâu đó, khi mà nền tảng mình đã đầu tư tìm hiểu không hỗ trợ được nhu cầu hiện tại, và cũng không tìm được giải pháp thay thế.</p><p>Thứ ba,&nbsp;nhược điểm này tiếp nối ý với nhược điểm 2, đó chính là vì để hiểu rõ “đường đi nước bước” của một nền tảng low-code sẽ khá tốn thời gian nên thông thường, chỉ có khoảng 1 hay 2 người trong team biết rõ cách hoạt động của nền tảng này. Xét về mặt doanh nghiệp, đây là một nước đi vô cùng mạo hiểm.</p><p>Vì không giống như việc lập trình thông thường thì các lập trình viên có thể quản lý code thông qua git, và có thể xem lại lịch sử hoặc tua lại một phiên bản cũ hơn. Ở đây, nếu những nhân tố này rời khỏi đội nhóm, thì sẽ không còn ai hiểu được cách vận hành nữa. Chính vì thế, chưa thể hoàn toàn dựa vào low-code platform để phát triển phần mềm cho doanh nghiệp lớn được.</p><p>Cuối cùng,&nbsp;một nhược điểm lớn khi làm việc với low-code platform chính là “sự trói buộc”. Khi mình xây dựng tất cả tính năng trên một platform cụ thể thì xử lý thì sẽ rất tiện thời gian đầu; tuy nhiên, sau một thời gian dài, người dùng đang tự trói buộc mình và phụ thuộc rất nhiều vào platform đó. Lúc này, mình không biết được trong blackbox đó, hệ thống đang vận hành thế nào, nếu có gì rủi ro hay sự cố mình hoàn toàn không kiểm soát được, và việc chuyển qua một nền tảng khác không hề dễ dàng khi dữ liệu để vận hành đã nằm trên nền tảng hiện tại.</p>',3,5,'2023-01-15 11:31:10.661516','2023-01-15 11:31:10.661519'),(6,'Unreal Engine là gì? Unreal Engine 5 thay đổi cách làm game như thế nào?','<p><em>Unreal Engine là gì? Unreal Engine là một trong những game engine phổ biến và mạnh mẽ nhất trong giới làm game hiện nay. Nhưng điều gì mới thực sự giúp Unreal Engine trở thành một game engine không thể bị thay thế?</em></p><blockquote><em>Bài viết được thực hiện với thông tin và chia sẻ từ anh&nbsp;Khoa Phạm – Game Developer &amp; Tech Lead @&nbsp;Dreamchaser Interactive.</em></blockquote><p>Song song với&nbsp;<a href=\"https://itviec.com/blog/unity-la-gi/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">Unity</a>, Unreal Engine là một trong những game engine được quan tâm và sử dụng nhiều nhất hiện tại, nhất là sau đợt cập nhật Unreal Engine 5 cùng với sự ra mắt của hai tính năng Nanite, Lumen – mà theo anh Khoa Phạm chia sẻ “<em>là hai cánh cửa mở ra vô vàn khả năng mà đó giờ người làm game chỉ dám “mơ” thôi</em>”.</p><blockquote><a href=\"https://itviec.com/it-jobs/game-developer/?utm_medium=anchor_text&amp;utm_source=blog_13012023&amp;utm_campaign=stockblog2023\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\"><em>Việc làm Game Developer toàn quốc trên ITviec!</em></a></blockquote><h2>Unreal Engine là gì?</h2><h3>Unreal Engine là gì?</h3><p>Được phát triển bởi Epic Games,&nbsp;<a href=\"https://www.unrealengine.com/en-US\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(234, 30, 48);\">Unreal Engine</a>&nbsp;là một game engine gồm nhiều tool set, framework, libraries,… tất cả hỗ trợ tạo nên một trải nghiệm làm game tiện lợi. Unreal Engine giúp đơn giản hóa các bước làm game để game developer không nhất thiết phải lập trình chuyên sâu, không cần xử lý âm thanh/ đồ họa mà chỉ cần tập trung làm nội dung cho game.</p><p>Ngoài làm game, Unreal Engine còn được ứng dụng trong làm phim, virtual, metaverse,… nên có thể nói Unreal Engine là real-time engine/ interactive engine hơn chỉ là game engine.</p><p>Unreal Engine hỗ trợ hệ điều hành Android, iOS,… và những nền tảng lớn. Tuy nhiên, Unreal Engine đã ngừng hỗ trợ nền tảng web do:</p><ul><li>Chất lượng của game dành cho web khác với chất lượng độ hiển thị giao diện của điện thoại, laptop mà điện thoại, laptop gần như đã có API chung rồi.</li><li>Công nghệ phát triển web vẫn còn nhiều bất cập, chưa phù hợp với hướng phát triển của Unreal Engine là hướng photo realistic, đồ họa đẹp với chất lượng cao.</li></ul><p>Một trong những tựa game nổi nhất của Unreal Engine chính là Fortnite. Fortnite không chỉ mang đến sự chú ý cho Unreal mà còn mang về rất nhiều lợi nhuận giúp Unreal có thể xây dựng nhiều tính năng và được chú ý như bây giờ. Chính vì vậy, có thể nói nhờ Fortnite mà Unreal Engine… “đổi đời”. Ngoài ra, các game nổi tiếng khác do Unreal phát triển có thể kể đến như Kena: Bridge Of Spirits, Tekken, Mortal Kombat, hầu hết các game Marvel.</p><h3>Những tính năng nổi bật của Unreal Engine 5</h3><ul><li>Nanite – Hệ thống hình học ảo hóa:</li></ul><p><img src=\"https://itviec.com/blog/wp-content/uploads/2023/01/unreal-engine-la-gi-tinh-nang-nanite.jpg\" alt=\"unreal engine là gì - tính năng nanite - unreal engine 5\" height=\"1200\" width=\"1500\"></p><p>Trong quá trình làm 3D thì người artist có khi phải vẽ lên đến hàng triệu, hàng tỷ polygon. Càng nhiều polygon thì máy tính càng chậm chính vì thế thông thường khi làm game, artist phải giới hạn số lượng polygon để game chạy nhanh hơn.</p><p>Trước đây, artist hay game developer phải tính thủ công xem mình còn được vẽ bao nhiêu polygon nữa, rồi cân đối, vẽ đi vẽ lại, nhất là đối với những mô hình 3D chi tiết, để đạt tới đúng giới hạn số polygon được đề ra. Đây là quá trình rất tốn thời gian.</p><p>Bây giờ, Unreal Engine 5 ra mắt Nanite – tính năng có thể tính toán số lượng polygon cần vẽ mà vẫn chi tiết nhất, chất lượng tối đa so với khả năng hiển thị của màn hình. Điều đó có nghĩa là artist hay game developer không cần phải tính số lượng polygon phù hợp thủ công như trước đây nữa mà Nanite sẽ làm chuyện đó.</p><blockquote><em>Anh Khoa đưa ví dụ:&nbsp;Có những chi tiết quá nhỏ, mắt thường không nhìn thấy được nhưng máy tính vẫn tính những polygon tạo nên chi tiết đó và làm chậm máy khi chạy game. Nanite sẽ tự động phân tích và loại bỏ những polygon dư thừa đó để phù hợp với màn hình hiển thị.</em></blockquote><p>Bây giờ, artist chỉ cần đưa khối 3D chi tiết nhất của họ vào cho Nanite tính toán. Kết quả là họ vẫn sẽ có một khối 3D nhìn vẫn rất chi tiết nhưng giảm được số lượng polygon. Có thể nói, Nanite là câu trả lời cho câu hỏi “Tính năng làm&nbsp;<em>tỏa sáng</em>&nbsp;Unreal Engine là gì?”.</p><ul><li>Lumen – Hệ thống chiếu sáng và phản xạ:</li></ul><p><img src=\"https://itviec.com/blog/wp-content/uploads/2023/01/unreal-engine-la-gi-tinh-nang-lumen.jpg\" alt=\"unreal engine là gì - tính năng lumen - unreal engine 5\" height=\"1200\" width=\"1500\"></p><p>Tính năng này được xây dựng từ một vấn đề thường gặp của game developer:</p><blockquote><em>Mình có một căn phòng và một nguồn sáng. Trong vật lý thực tế, khi nguồn sáng chiếu vào một bức tường trong căn phòng thì tùy vào màu tường mà ánh sáng sẽ phản ciếu lại màu đó vào không gian căn phòng.</em></blockquote><blockquote><em>Tuy nhiên, đó giờ máy tính không tính được “sự phản chiếu”, mà chỉ là chiếu điểm nào thì sáng điểm đó chứ không tính được đường ánh sáng đi từ đâu qua đâu, để tạo ánh sáng cho khoảng không gian.</em></blockquote><blockquote><em>Để tính được đường đi của ánh sáng một cách đẹp và mượt nhất, game developer phải tốn rất nhiều thời gian để “tính ánh sáng” thủ công đúng và đẹp rồi mới đem vào trong game được.</em></blockquote><p>Bây giờ đã có tính năng Lumen giải quyết được bài toán rất lớn này. Lumen có thể vừa chạy nhanh, vừa đưa ra cách đánh ánh sáng mượt mà.</p><ul><li>Niagara – Hệ thống hiệu ứng video (VFX):</li></ul><p><img src=\"https://itviec.com/blog/wp-content/uploads/2023/01/unreal-engine-la-gi-tinh-nang-niagara.jpg\" alt=\"unreal engine là gì - tính năng niagara - unreal engine 5\" height=\"1200\" width=\"1500\"></p><p>Niagara có thể tự động tạo ra nhiều hiệu ứng video như nổ cháy, nước chảy, khói,… đa dạng và chất lượng tốt.</p><p>Bình thường để tạo ra hiệu ứng như vậy, game developer có thể lập trình theo cách truyền thống và chạy trên CPU (không phải GPU). Cách tiếp cận này rất chậm.</p><p>Chính vì thế, Niagara được thiết kế với hệ thống Blueprint và đơn giản hóa cách set up logic, lập trình VFX trên GPU. Niagara là tính năng đầu tiên mở ra cách đơn giản hoá Compute Shader. Với Niagara, game developer có thể tính ánh sáng, nước chảy, người hoạt động,… tất cả những thứ mình muốn mà không chỉ mỗi VFX.</p><ul><li>Chaos/ Chaos Physics – Hệ thống tính vật lý:</li></ul><p><img src=\"https://itviec.com/blog/wp-content/uploads/2023/01/unreal-engine-la-gi-tinh-nang-chaos-physics.jpg\" alt=\"unreal engine là gì - tính năng chaos physics - unreal engine 5\" height=\"1200\" width=\"1500\"></p><p>Chaos Physics là hệ thống tính vật lý mới của Unreal. Game developer có thể tăng tính chính xác của tương tác vật lý hơn, tính được nhiều loại vật lý hơn so với hệ thống tính vật lý cũ.</p><p>Bằng cách xây dựng công cụ vật lý của riêng mình, Unreal Engine sử dụng Chaos để mở ra nhiều cơ hội mới để kiểm soát nhiều hơn và đóng vai trò là nền tảng cho:</p><ol><li>Chaos Destruction: Mô phỏng các cảnh hủy diệt lớn trong thời gian thực, chẳng hạn như một tòa nhà sụp đổ</li><li>Chaos hỗ trợ các trò chơi nhiều người chơi/ nối mạng rất tốt nhờ vào khả năng kiểm soát lớn hơn.</li></ol><ul><li>Control Rig – Hệ thống điều khiển rối:</li></ul><p><img src=\"https://itviec.com/blog/wp-content/uploads/2023/01/unreal-engine-la-gi-tinh-nang-control-rig.jpg\" alt=\"unreal engine là gì - tính năng control rig - unreal engine 5\" height=\"1200\" width=\"1500\"></p><p>Mục đích chính của Control Rig là cho phép điều khiển các nhân vật theo thủ tục một cách chính xác. Thủ tục có nghĩa là sử dụng lập trình Blueprint để thực hiện các phép tính trong thời gian thực nhằm kiểm soát các bộ phận của nhân vật dựa trên đầu vào.</p><blockquote><em>Ví dụ: Một nhân vật, với các bộ phận bổ sung gắn vào anh ta như kiếm hoặc vũ khí, có animation đang chạy nhưng những vật thể bổ sung này có thể không di chuyển chính xác với animation từ cánh tay. Từ đó, bạn có thể sử dụng Control Rig để đọc dữ liệu animation và dễ dàng tính toán chính xác vị trí cho các bộ phận bổ sung đó.</em></blockquote><p>Do tính linh hoạt của Control Rig, tính năng cũng có thể được sử dụng để tạo ra animation mới dựa trên các phép tính thủ tục này bằng cách baking các phép tính thành các animation.</p><ul><li>Meta Sounds – Hệ thống kết nối và tạo ra hiệu ứng âm thanh trong thời gian thực:</li></ul><p><img src=\"https://itviec.com/blog/wp-content/uploads/2023/01/unreal-engine-la-gi-tinh-nang-metasounds.jpg\" alt=\"unreal engine là gì - tính năng metasounds - unreal engine 5\" height=\"1200\" width=\"1500\"></p><p>Meta Sounds có thể tạo ra âm thanh thực tùy thuộc theo hoàn cảnh, tùy thuộc vào tương tác trong game. Dựa vào âm thanh đầu vào do mình thu, Meta Sounds sẽ tự tính được độ lớn nhỏ, độ vang âm thanh, nếu có con vật thì tiếng thế nào,… trong từng không gian khác nhau.</p>',3,5,'2023-01-15 14:36:32.599608','2023-01-15 14:36:32.599612');
/*!40000 ALTER TABLE `Blogs` ENABLE KEYS */;
UNLOCK TABLES;
SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-01-30 22:52:08
