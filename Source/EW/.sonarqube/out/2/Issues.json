{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.7.0.0",
        "fileVersion": "4.7.0-3.23280.5 (aff92b57)",
        "semanticVersion": "4.7.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "S3246",
          "level": "warning",
          "message": "Add the 'out' keyword to parameter 'T' to make it 'covariant'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/Dacntt2/Source/EW/EW.Repository/IDatabaseFactory.cs",
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 5,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "S3246": {
          "id": "S3246",
          "shortDescription": "Generic type parameters should be co/contravariant when possible",
          "fullDescription": "In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the out and in modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3246",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        }
      }
    }
  ]
}