Ë
8D:\Dacntt2\Source\EW\EW.Commons\Constaints\Constaints.cs
	namespace 	
EW
 
. 
Commons 
. 

Constaints 
{ 
public 

static 
class 

Constaints "
{ 
public 
const 
string 
SALT_HASH_PASSWORD .
=/ 0
$str	1 ñ
;
ñ ó
public 
const 
string 
ACCES_TOKEN_KEY +
=, -
$str	. Ä
;
Ä Å
public 
const 
string 
REFRESH_TOKEN_KEY -
=. /
$str	0 Ç
;
Ç É
public 
const 
string 
COUNTRY_DEFAULT +
=, -
$str. 2
;2 3
public		 
const		 
string		 
STRING_BLANK		 (
=		) *
$str		+ -
;		- .
}

 
} ‡
;D:\Dacntt2\Source\EW\EW.Commons\Enums\EApplicationStatus.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
EApplicationStatus "
{ 
[ 	
Description	 
( 
$str 6
)6 7
]7 8
ReceptionCV 
, 
[		 	
Description			 
(		 
$str		 "
)		" #
]		# $
Marked

 
,

 
[ 	
Description	 
( 
$str $
)$ %
]% &
	Interview 
, 
[ 	
Description	 
( 
$str 
) 
] 
Done 
, 
[ 	
Description	 
( 
$str 
) 
]  
Rejected 
, 
} 
} ◊
5D:\Dacntt2\Source\EW\EW.Commons\Enums\ECompanyType.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
ECompanyType 
{ 
Outsourcing 
, 
Product 
} 
} ¥
2D:\Dacntt2\Source\EW\EW.Commons\Enums\ECurrency.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
	ECurrency 
{ 
[ 	
Description	 
( 
$str #
)# $
]$ %
VND 
= 
$num 
, 
[		 	
Description			 
(		 
$str		 
)		 
]		 
USD

 
} 
} í
2D:\Dacntt2\Source\EW\EW.Commons\Enums\EFileType.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
	EFileType 
{ 
CV 

= 
$num 
, 
Report 
, 
CompanyAvatar 
} 
}		 ö
.D:\Dacntt2\Source\EW\EW.Commons\Enums\ERole.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
ERole 
{ 
[ 	
Description	 
( 
$str 
) 
]  

ID_Faculty 
= 
$num 
, 
[		 	
Description			 
(		 
$str		 
)		  
]		  !
ID_Business

 
=

 
$num

 
,

 
[ 	
Description	 
( 
$str 
) 
]  

ID_Student 
= 
$num 
, 
} 
} ∑
4D:\Dacntt2\Source\EW\EW.Commons\Enums\ESalaryType.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
ESalaryType 
{ 
	Negotiate 
= 
$num 
, 
Range 
, 
UpTo 
, 
Minimum 
}		 
}

 √
9D:\Dacntt2\Source\EW\EW.Commons\Enums\EStatusRecruiter.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
EStatusRecruiter  
{ 
[ 	
Description	 
( 
$str (
)( )
]) *
Pending 
, 
[		 	
Description			 
(		 
$str		  
)		  !
]		! "
Active

 
,

 
[ 	
Description	 
( 
$str "
)" #
]# $
Disabled 
, 
} 
} ∑
2D:\Dacntt2\Source\EW\EW.Commons\Enums\ETeamSize.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
	ETeamSize 
{ 
ZeroTo50 
, 

FiftyTo100 
, 
OneHundredTo200 
, 
TwoHundredTo300 
, 
ThreeHundredTo500		 
,		 
FiveHundredTo1000

 
,

 
OneThousand 
, 
TwoThousand 
, 
ThreeThousand 
, 
FiveThousand 
, 
} 
} ®
5D:\Dacntt2\Source\EW\EW.Commons\Enums\EWorkingType.cs
	namespace 	
EW
 
. 
Commons 
. 
Enums 
{ 
public 

enum 
EWorkingType 
{ 
AtOffice 
= 
$num 
, 
Remote 
, 
Flexible 
, 
} 
}		 ë
9D:\Dacntt2\Source\EW\EW.Commons\Exceptions\EWException.cs
	namespace 	
EW
 
. 
Commons 
. 

Exceptions 
{ 
public 

class 
EWException 
: 
	Exception (
{ 
public 
EWException 
( 
string !
message" )
)) *
:+ ,
base- 1
(1 2
message2 9
)9 :
{; <
}= >
	protected		 
EWException		 
(		 
SerializationInfo		 /
information		0 ;
,		; <
StreamingContext		= M
context		N U
)		U V
:		W X
base		Y ]
(		] ^
information		^ i
,		i j
context		k r
)		r s
{		t u
}		v w
}

 
} ©
5D:\Dacntt2\Source\EW\EW.Commons\Helpers\EnumHelper.cs
	namespace 	
EW
 
. 
Commons 
. 
Helpers 
{ 
public 

static 
class 

EnumHelper "
{ 
public 
static 
string 
? 
Description )
() *
this* .
Enum/ 3
	enumValue4 =
)= >
{		 	
return

 
	enumValue

 
.

 
GetType

 $
(

$ %
)

% &
?

& '
. 
	GetMember 
( 
	enumValue $
.$ %
ToString% -
(- .
). /
)/ 0
?0 1
. 
FirstOrDefault 
(  
)  !
?! "
. 
GetCustomAttribute #
<# $ 
DescriptionAttribute$ 8
>8 9
(9 :
): ;
?; <
.< =
Description= H
;H I
} 	
public 
static 
T #
GetValueFromDescription /
</ 0
T0 1
>1 2
(2 3
string3 9
description: E
)E F
whereG L
TM N
:O P
EnumQ U
{ 	
foreach 
( 
var 
field 
in !
typeof" (
(( )
T) *
)* +
.+ ,
	GetFields, 5
(5 6
)6 7
)7 8
{ 
if 
( 
	Attribute 
. 
GetCustomAttribute 0
(0 1
field1 6
,6 7
typeof 
(  
DescriptionAttribute +
)+ ,
), -
is. 0 
DescriptionAttribute1 E
	attributeF O
)O P
{ 
if 
( 
	attribute !
.! "
Description" -
==. 0
description1 <
)< =
return 
(  
T  !
)! "
field" '
.' (
GetValue( 0
(0 1
null1 5
)5 6
;6 7
} 
else 
{ 
if 
( 
field 
. 
Name "
==# %
description& 1
)1 2
return 
(  
T  !
)! "
field" '
.' (
GetValue( 0
(0 1
null1 5
)5 6
;6 7
} 
} 
throw!! 
new!! 
ArgumentException!! '
(!!' (
$str!!( 4
,!!4 5
nameof!!6 <
(!!< =
description!!= H
)!!H I
)!!I J
;!!J K
}## 	
}$$ 
}%% …

3D:\Dacntt2\Source\EW\EW.Commons\Helpers\MyRandom.cs
	namespace 	
EW
 
. 
Commons 
. 
Helpers 
{ 
public 

static 
class 
MyRandom  
{ 
private 
static 
readonly 
Random  &
random' -
=. /
new0 3
(3 4
)4 5
;5 6
public 
static 
string 
RandomString )
() *
int* -
length. 4
)4 5
{ 	
const		 
string		 
chars		 
=		  
$str		! a
;		a b
return

 
new

 
string

 
(

 

Enumerable

 (
.

( )
Repeat

) /
(

/ 0
chars

0 5
,

5 6
length

7 =
)

= >
. 
Select 
( 
s 
=> 
s 
[ 
random %
.% &
Next& *
(* +
s+ ,
., -
Length- 3
)3 4
]4 5
)5 6
.6 7
ToArray7 >
(> ?
)? @
)@ A
;A B
} 	
} 
} 